.Drawing Utilities

Lbl DSCR {
    .Draws the screen
    .r1: CamX (0-255)
    .r2: CamY (0-255)
    .r3: CamZ (0-255)

    .Saving args and vars to stack
    S-35->S
    r_1->{S}
    r_2->{S+1}
    r_3->{S+2}
    A->{S+3}^r
    B->{S+5}^r

    .Zeroing out the entity present/island checked bits
    .S+7-18: is an entity present at the a certain tile
    .   (Xth byte, Yth bit)
    .S+19-34: has the given island been checked
    .   (Nth bit)
    For(G,7,34)
        0->{S+G}
    End

    .Iterating each tile
    For(A,0,7)
        For(B,0,11)
            .Seeing if we've already detected an entity here
            {S+7+B}eA->G
            !If G
                .If we haven't, see if we've checked this island yet
                GIAT({S}+B,{S+1}+A)->G
                If G
                    G/2/2/2+19->H .byte in island map
                    G and 7->I    .bit in island map (= G mod 8)
                    !If {S+H}eI
                        .We haven't checked this island yet. Get all its
                        .  entities, and mark them on our map.
                        {S+H} or e^(7-I)->{S+H}

                        {G*2+ID}^r->H
                        {H+ID}->I
                        For(J,1,I)
                            J*8+H->K
                            {K+1+ID}-{S}->L
                            {K+2+ID}-{S+1}->M
                            If L<12?M<8
                                {S+7+L} or e^(7-M)->{S+7+L}
                            End
                        End

                        .Finally, seeing if we detected an entity at our pos
                        {S+7+B}eA->G
                    Else
                        0->G
                    End
                End
            End

            .Drawing the tile
            DTIL({S}+B,{S+1}+A,
                B*2*2*2,A*2*2*2,
                {S+2},
                G)
        End
    End

    .Recovering the stack
    {S+3}^r->A
    {S+5}^r->B
    S+35->S

    Return
}

Lbl DTIL {
    .Draws a tile
    .r1: WorldX
    .r2: WorldY
    .r3: ScreenX
    .r4: ScreenY
    .r5: CameraZ
    .r6: Is there an entity to render here?

    .Storing args and variables
    S-8->S
    A->{S}^r
    B->{S+2}^r
    C->{S+4}^r
    D->{S+6}^r

    .Finding terrain heights for this tile and the one in front
    GHAT()->A
    GPBA()->D
    If A
        A-(De5)->A
    End
    r_2++
    GHAT()->B
    If B
        B-ISAT()->B
    End
    r_2--

    .Finding screen pos of top tile
    r_5-A*2+r_4->C

    .Rendering the wall between our tile and the tile in front
    De7*2+(De6)->G .wall type
    B->H .curr render height
    While H<A
        Pt-Mask(r_3, A-H*2+C, G+4*2*2*2*2+Pic1STIL)
        H+4->H
    End

    .Rendering the tile atop the wall
    If De6
        .If water, render a water tile
        Pt-Mask(r_3,C,Pic1STIL+128)
    Else
        .If land, find the ground type and render it
        .(The and-mask finds the upper half-byte of the property byte)
        Pt-Mask(r_3,C,D and 240+Pic1STIL)

        .Rendering borders with surrounding tiles
        If HB
            .(bottom)
            If r_4!=56?B<A
                HLine(C+7,r_3,r_3+7)
            End

            .(top)
            If r_4
                r_2--
                GHAT()->B
                B-ISAT()->B
                r_2++

                If B<A
                    HLine(C,r_3,r_3+7)
                End
            End

            .(left)
            If r_3
                r_1--
                GHAT()->B
                B-ISAT()->B
                r_1++

                If B<A
                    VLine(r_3,C,C+7)
                End
            End

            .(right)
            If r_3!=88
                r_1++
                GHAT()->B
                B-ISAT()->B
                r_1--

                If B<A
                    VLine(r_3+7,C,C+7)
                End
            End
        End
    End

    .Rendering the cursor if applicable
    If r_1=SX?r_2=SY
        Pt-Mask(r_3,C,Pic1CURS)

        .And within that, rendering the island number if applicable
        If RN
            GIAT()->G
            Text(r_3,C,G>Dec)
        End
    End

    .Render stumps/rocks if needed
    If De4
        Pt-Mask(r_3,C-2,Pic1STIL+144)
    ElseIf De5
        Pt-Mask(r_3,C,Pic1STIL+160)
    End

    .Then, we can draw the entities at that position if applicable
    If r_6
        GSEH()->G
        If G
            For(H,1,G)
                {-H*2+S}^r->I
                {I}->J
                nib{GDB1ERUD*2+J}^r->K
                Pt-Mask(
                    r_3,
                    r_5-{I+5}*2+2-K+r_4,
                    J*2*2*2*2+Pic1SENT
                )
            End
        End
    End

    .Recovering the stack
    {S}^r->A
    {S+2}^r->B
    {S+4}^r->C
    {S+6}^r->D
    S+8->S

    Return
}
