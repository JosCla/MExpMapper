.MEXPMAPS
.A program for viewing and editing MExp maps

.Setting fixes
Fix 5 .(draw text to buffers)

.Basic setup
L_1+768->S
prgmMMSTAT

.Main menu
ClrHomeClrDraw^r^r
MENU(2,L_1+80,3,3)->A
If A=1
    ReturnIf LWOR()
ElseIf A=2
    .Getting desired map dimensions
    0->A
    0->B
    20->C
    20->D
    400->E
    Repeat A=2
        .Displaying stuff
        ClrHomeClrDraw^r^r
        Text(3,3,"SETTINGS")
        Text(3,11,"WIDTH:")
        Text(3,19,"HEIGHT:")
        Text(3,27,"IDAT SIZE:")
        IRect(3,B*8+11,36,8)
        Text(40,11,C>Dec)
        Text(40,19,D>Dec)
        Text(40,27,E>Dec)
        DispGraph

        .Awaiting inputs
        0->A
        Repeat A
            If getKey(1)
                B<2?B++
                1->A
            ElseIf getKey(2)
                If B=0?C>12
                    C--
                ElseIf B=1?D>8
                    D--
                ElseIf B=2?E
                    E-8->E
                End
                1->A
            ElseIf getKey(3)
                If B=0?C<100
                    C++
                ElseIf B=1?D<100
                    D++
                ElseIf B=2?E<1000
                    E+8->E
                End
                1->A
            ElseIf getKey(4)
                B?B--
                1->A
            ElseIf getKey(15)
                2->A
            End
        End

        .(pausing to make the inputs less rapid)
        Pause 100
    End

    ReturnIf CFIL(C,D,E)
Else
    Return
End

.Getting the editor ready
ClrHomeClrDraw^r^r
0->CP
0->SX->SY
1->RN
SEMD(0)
CCAS()
DSCR()

.Main loop
Repeat getKey(15)
    DGWP()

    .Movement
    If getKey(1)
        MVSL(0,1)
    ElseIf getKey(2)
        MVSL(-1,0)
    ElseIf getKey(3)
        MVSL(1,0)
    ElseIf getKey(4)
        MVSL(0,-1)
    End

    .Editor mode changing
    If getKey(53)
        SEMD(1)
        DSTA("IMAP MODE",0)
    ElseIf getKey(52)
        SEMD(2)
        DSTA("IDAT MODE",2)
    ElseIf getKey(51)
        SEMD(3)
        DSTA("HMAP MODE",0)
    ElseIf getKey(50)
        SEMD(4)
        DSTA("OMAP MODE",0)
    End

    .Actions within editor mode
    If MD=1
        .IMAP mode

        If getKey(54)
            .Place island
            SIAT(SX,SY,CB)
            DGUP(1)
            DRSL()
        ElseIf getKey(48)
            .Eyedropper island
            GIAT(SX,SY)->G
            SPIL(G)
            DSTA("ISLAND:",1,CB)
        ElseIf getKey(10)
            .Increase placing island
            SPIL(CB+1)
            DSTA("ISLAND:",1,CB)
            Pause 100
        ElseIf getKey(11)
            .Decrease placing island
            SPIL(CB-1)
            DSTA("ISLAND:",1,CB)
            Pause 100
        ElseIf getKey(55)
            .Set respawn point of island
            GHAT(SX,SY)+1->A
            GIAT(SX,SY)->B
            SRSP(SX,SY,A,B)
            DSTA("RESPAWN SET",0)
            Pause 100
        ElseIf getKey(40)
            .Move cursor to respawn point of island
            MVSR(CB)
            DGUP(1)
            DRSL()
        ElseIf getKey(39)
            .Set island as first island
            GIAT(SX,SY)->G
            SFIL(G)
            DSTA("FIRST SET",0)
            Pause 100
        ElseIf getKey(32)
            .Allocate memory for another island
            MKIL()
            {ID}->CB
            DSTA("ISL COUNT:",1,{ID})
            Pause 500
        ElseIf getKey(47)
            .Toggle island number display
            1-RN->RN
            DGUP(1)
            DRSL()
        End
    ElseIf MD=2
        .IDAT mode

        .Checking numeric inputs
        For(A,1,9)
            {A+GDB1NCOD}->G
            If getKey(G)
                A->CB
                DSTA({A*2+50+L_1}^r,0)
            End
        End

        If getKey(54)?CB
            .Place entity at highest point of selection
            PEOT(SX,SY,CB)
            DGUP(1)
            DRSL()
            GOSA(SX,SY)->G
            DSTA("SLOTS:",1,G)
        ElseIf getKey(48)
            .Delete highest entity at selection
            DHEA(SX,SY)
            DGUP(1)
            DRSL()
        ElseIf getKey(47)
            .Get num open slots at selection
            GOSA(SX,SY)->G
            DSTA("SLOTS:",1,G)
        ElseIf getKey(32)
            .Create open slots at selection
            COSA(SX,SY,1)
            Pause 100
            GOSA(SX,SY)->G
            DSTA("SLOTS:",1,G)
        ElseIf getKey(31)
            .Do compaction
            CPAI()
            Pause 100
            DSTA("COMPACTION",2)
        End
    ElseIf MD=3
        .HMAP mode
        If getKey(54)
            CHHT(SX,SY,1)
            DGUP(1)
            DRSL()
        ElseIf getKey(48)
            CHHT(SX,SY,-1)
            DGUP(1)
            DRSL()
        ElseIf getKey(55)
            GHAT(SX,SY)->CB
            DSTA("HEIGHT COPIED:",1,CB)
        ElseIf getKey(40)
            STHT(SX,SY,CB)
            DGUP(1)
            DRSL()
        ElseIf getKey(47)
            GHAT(SX,SY)->G
            DSTA("HEIGHT:",1,G)
        End
    ElseIf MD=4
        .OMAP mode
        If getKey(54)
            TGWT(SX,SY)
            DGUP(1)
            DRSL()
        ElseIf getKey(48)
            TGST(SX,SY)
            DGUP(1)
            DRSL()
        ElseIf getKey(47)
            TGRK(SX,SY)
            DGUP(1)
            DRSL()
        ElseIf getKey(46)
            TGLD(SX,SY)
            DGUP(1)
            DRSL()
        ElseIf getKey(55)
            GPBA(SX,SY)->CB
        ElseIf getKey(40)
            SPBA(SX,SY,CB)
            DGUP(1)
            DRSL()
        End
    End
End

.Unsetting fixes
Fix 4 .(draw text to screen)

.Saving and exiting
ClrHome
Disp "SAVING..."
REAF()->A
If A
    ClrHome
    Disp "FAILED TO REARC"
    Repeat getKey(9)
    End
End
Return

Lbl MVSL {
    .Moves the selector by a given offset
    .r1: MoveX
    .r2: MoveY

    .Moving the selector
    SX+r_1->G
    SY+r_2->H
    If G<MW?H<MH
        G->SX
        H->SY
    End

    .Drawing to a parity of 1
    DGUP(1)

    .Redrawing the screen
    DRSL()

    Return
}

Lbl SEMD {
    .Set editor mode
    .r1: New editor mode

    r_1->MD
    0->CB
}

.(insert all other source files here)
