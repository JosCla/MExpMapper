.MExp Entity Edit

Lbl GOSL {
    .Get open slots on an island
    .r1: Island number
    .Returns the number of open bytes between this island and the next

    .Getting a pointer to the first open slot of the given island
    {r_1*2+ID}^r->G .pointer to start of island
    {G+ID}->H       .number of entities on island
    H*8+G->I        .pointer to first open slot

    .Getting a pointer to the next island's data, storing in H
    .   (or, if it's the last island, the end of the file)
    If {ID}^r=r_1
        {ID-2}^r->H
    Else
        {r_1+1*2+ID}^r->H
    End

    .Returning number of open slots
    H-I/8Return
}

Lbl GOSA {
    .Get open slots at
    .r1-r2: posX, posY
    .Returns number of open slots in the island at the cursor
    .   (returns 0 if no island)
    GIAT()->G
    GOSL(G)Return
}

Lbl DENT {
    .Delete Entity
    .r1-r2: Entity ID (island, entity number)
    .Returns nothing

    .Getting the entity count on the island
    {r_1*2+ID}^r->G .pointer to start of island
    {G+ID}->H       .number of entities on island

    H-r_2->I        .number of entities after the entity to shift down
    If I
        .If this is not the last entity, copy down subsequent entities
        r_2*8+G+ID->J   .pointer to entity to delete
        Copy(J+8,J,I*8)
    End

    .Decrementing number of entities on the island
    H-1->{G+ID}

    Return
}

Lbl DHEA {
    .Delete highest entity at
    .r1-r2: posX, posY
    .Returns nothing

    .Getting pointer to highest entity at the given point
    255->r_3
    GHEB()->G

    If G
        .Deleting the entity
        DENT({G+3},{G+4})
    End

    Return
}
