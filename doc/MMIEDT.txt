.MExp Island Edit

Lbl SIAT {
    .Set island at
    .r1-r2: posX, posY
    .r3: value to place
    .Returns nothing

    .Checking bounds
    If r_2>=MH??r_1>=MW??r_3>{ID}
        Return
    End

    .Setting island
    r_3->{r_2*MW+r_1+2+IM}

    Return
}

Lbl SPIL {
    .Set placing island (with bounds-checking)
    .r1: new island index
    .Returns nothing

    r_1<={ID}?r_1->CB

    Return
}

Lbl SRSP {
    .Set respawn point
    .r1-r2: posX, posY
    .r3: height
    .r4: island number

    .Making sure island is both greater than zero and less than max islands
    Return!If r_4?<={ID}

    .Setting the respawn point
    {r_4*2+ID}^r+ID->G   .pointer to island
    r_1->{G+1}
    r_2->{G+2}
    r_3->{G+3}

    Return
}

Lbl MVSR {
    .Move selection to respawn point
    .r1: island number

    .Making sure island is both greater than zero and less than max islands
    Return!If r_1?<={ID}

    .Moving selection to respawn point
    {r_1*2+ID}^r+ID->G   .pointer to island
    {G+1}->SX
    {G+2}->SY

    Return
}

Lbl SFIL {
    .Set first island (the island you start on in the map)
    .r1: island number

    .Making sure island is both greater than zero and less than max islands
    Return!If r_1?<={ID}

    .Setting every island but this one as not being the first island
    {ID}->G .num islands
    For(H,1,G)
        {H*2+ID}^r+ID->I    .island pointer
        H=r_1->{I+4}
    End

    Return
}

Lbl MKIL {
    .Make new island (allocate space for it)

    .Making sure there are at least 10 free bytes to use
    .(2 for pointer, 8 for island data header)
    IDUT()->G   .IDAT memory used
    IDMU()->H   .total IDAT memory
    Return!If H-G>=10

    .Shifting all islands forward by 2 to make room for new pointer
    {ID}->H .num islands
    While H
        .Moving island data
        {H*2+ID}^r->I
        {I+ID}->J
        CPRV(I+ID,I+2+ID,J+1*8)

        .Changing island pointer
        I+2->{H*2+ID}^r

        .Iterating to previous island
        H--
    End

    .Adding new pointer
    IDUT()->G   .IDAT utilization also returns relative ptr to first open byte
    {ID}+1->H   .num islands
    H->{ID}
    G->{H*2+ID}^r

    .Adding new island header
    G+ID->G
    0->{G}^r
    0->{G+2}^r
    0->{G+4}^r
    0->{G+6}^r

    Return
}
